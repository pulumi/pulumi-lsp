package lsp

import (
	"context"

	"go.lsp.dev/protocol"
)

// Note: this file was generated by a combination of copy/paste + macros.

// Methods provides the interface to define methods for the LSP server.
type Methods struct {
	// A pointer back to the server
	server *Server
	// And a channel to indicate that the server has exited
	closer chan<- struct{}

	InitializeFunc                func(ctx context.Context, params *protocol.InitializeParams) (result *protocol.InitializeResult, err error)
	InitializedFunc               func(ctx context.Context, params *protocol.InitializedParams) (err error)
	ShutdownFunc                  func(ctx context.Context) (err error)
	ExitFunc                      func(ctx context.Context) (err error)
	WorkDoneProgressCancelFunc    func(ctx context.Context, params *protocol.WorkDoneProgressCancelParams) (err error)
	LogTraceFunc                  func(ctx context.Context, params *protocol.LogTraceParams) (err error)
	SetTraceFunc                  func(ctx context.Context, params *protocol.SetTraceParams) (err error)
	CodeActionFunc                func(ctx context.Context, params *protocol.CodeActionParams) (result []protocol.CodeAction, err error)
	CodeLensFunc                  func(ctx context.Context, params *protocol.CodeLensParams) (result []protocol.CodeLens, err error)
	CodeLensResolveFunc           func(ctx context.Context, params *protocol.CodeLens) (result *protocol.CodeLens, err error)
	ColorPresentationFunc         func(ctx context.Context, params *protocol.ColorPresentationParams) (result []protocol.ColorPresentation, err error)
	CompletionFunc                func(ctx context.Context, params *protocol.CompletionParams) (result *protocol.CompletionList, err error)
	CompletionResolveFunc         func(ctx context.Context, params *protocol.CompletionItem) (result *protocol.CompletionItem, err error)
	DeclarationFunc               func(ctx context.Context, params *protocol.DeclarationParams) (result []protocol.Location, err error)
	DefinitionFunc                func(ctx context.Context, params *protocol.DefinitionParams) (result []protocol.Location, err error)
	DidChangeFunc                 func(ctx context.Context, params *protocol.DidChangeTextDocumentParams) (err error)
	DidChangeConfigurationFunc    func(ctx context.Context, params *protocol.DidChangeConfigurationParams) (err error)
	DidChangeWatchedFilesFunc     func(ctx context.Context, params *protocol.DidChangeWatchedFilesParams) (err error)
	DidChangeWorkspaceFoldersFunc func(ctx context.Context, params *protocol.DidChangeWorkspaceFoldersParams) (err error)
	DidCloseFunc                  func(ctx context.Context, params *protocol.DidCloseTextDocumentParams) (err error)
	DidOpenFunc                   func(ctx context.Context, params *protocol.DidOpenTextDocumentParams) (err error)
	DidSaveFunc                   func(ctx context.Context, params *protocol.DidSaveTextDocumentParams) (err error)
	DocumentColorFunc             func(ctx context.Context, params *protocol.DocumentColorParams) (result []protocol.ColorInformation, err error)
	DocumentHighlightFunc         func(ctx context.Context, params *protocol.DocumentHighlightParams) (result []protocol.DocumentHighlight, err error)
	DocumentLinkFunc              func(ctx context.Context, params *protocol.DocumentLinkParams) (result []protocol.DocumentLink, err error)
	DocumentLinkResolveFunc       func(ctx context.Context, params *protocol.DocumentLink) (result *protocol.DocumentLink, err error)
	DocumentSymbolFunc            func(ctx context.Context, params *protocol.DocumentSymbolParams) (result []interface{}, err error)
	ExecuteCommandFunc            func(ctx context.Context, params *protocol.ExecuteCommandParams) (result interface{}, err error)
	FoldingRangesFunc             func(ctx context.Context, params *protocol.FoldingRangeParams) (result []protocol.FoldingRange, err error)
	FormattingFunc                func(ctx context.Context, params *protocol.DocumentFormattingParams) (result []protocol.TextEdit, err error)
	HoverFunc                     func(ctx context.Context, params *protocol.HoverParams) (result *protocol.Hover, err error)
	ImplementationFunc            func(ctx context.Context, params *protocol.ImplementationParams) (result []protocol.Location, err error)
	OnTypeFormattingFunc          func(ctx context.Context, params *protocol.DocumentOnTypeFormattingParams) (result []protocol.TextEdit, err error)
	PrepareRenameFunc             func(ctx context.Context, params *protocol.PrepareRenameParams) (result *protocol.Range, err error)
	RangeFormattingFunc           func(ctx context.Context, params *protocol.DocumentRangeFormattingParams) (result []protocol.TextEdit, err error)
	ReferencesFunc                func(ctx context.Context, params *protocol.ReferenceParams) (result []protocol.Location, err error)
	RenameFunc                    func(ctx context.Context, params *protocol.RenameParams) (result *protocol.WorkspaceEdit, err error)
	SignatureHelpFunc             func(ctx context.Context, params *protocol.SignatureHelpParams) (result *protocol.SignatureHelp, err error)
	SymbolsFunc                   func(ctx context.Context, params *protocol.WorkspaceSymbolParams) (result []protocol.SymbolInformation, err error)
	TypeDefinitionFunc            func(ctx context.Context, params *protocol.TypeDefinitionParams) (result []protocol.Location, err error)
	WillSaveFunc                  func(ctx context.Context, params *protocol.WillSaveTextDocumentParams) (err error)
	WillSaveWaitUntilFunc         func(ctx context.Context, params *protocol.WillSaveTextDocumentParams) (result []protocol.TextEdit, err error)
	ShowDocumentFunc              func(ctx context.Context, params *protocol.ShowDocumentParams) (result *protocol.ShowDocumentResult, err error)
	WillCreateFilesFunc           func(ctx context.Context, params *protocol.CreateFilesParams) (result *protocol.WorkspaceEdit, err error)
	DidCreateFilesFunc            func(ctx context.Context, params *protocol.CreateFilesParams) (err error)
	WillRenameFilesFunc           func(ctx context.Context, params *protocol.RenameFilesParams) (result *protocol.WorkspaceEdit, err error)
	DidRenameFilesFunc            func(ctx context.Context, params *protocol.RenameFilesParams) (err error)
	WillDeleteFilesFunc           func(ctx context.Context, params *protocol.DeleteFilesParams) (result *protocol.WorkspaceEdit, err error)
	DidDeleteFilesFunc            func(ctx context.Context, params *protocol.DeleteFilesParams) (err error)
	CodeLensRefreshFunc           func(ctx context.Context) (err error)
	PrepareCallHierarchyFunc      func(ctx context.Context, params *protocol.CallHierarchyPrepareParams) (result []protocol.CallHierarchyItem, err error)
	IncomingCallsFunc             func(ctx context.Context, params *protocol.CallHierarchyIncomingCallsParams) (result []protocol.CallHierarchyIncomingCall, err error)
	OutgoingCallsFunc             func(ctx context.Context, params *protocol.CallHierarchyOutgoingCallsParams) (result []protocol.CallHierarchyOutgoingCall, err error)
	SemanticTokensFullFunc        func(ctx context.Context, params *protocol.SemanticTokensParams) (result *protocol.SemanticTokens, err error)
	SemanticTokensFullDeltaFunc   func(ctx context.Context, params *protocol.SemanticTokensDeltaParams) (result interface{}, err error)
	SemanticTokensRangeFunc       func(ctx context.Context, params *protocol.SemanticTokensRangeParams) (result *protocol.SemanticTokens, err error)
	SemanticTokensRefreshFunc     func(ctx context.Context) (err error)
	LinkedEditingRangeFunc        func(ctx context.Context, params *protocol.LinkedEditingRangeParams) (result *protocol.LinkedEditingRanges, err error)
	MonikerFunc                   func(ctx context.Context, params *protocol.MonikerParams) (result []protocol.Moniker, err error)
	RequestFunc                   func(ctx context.Context, method string, params interface{}) (result interface{}, err error)
}

func (m *Methods) serve() *methods {
	return &methods{m}
}

// The actual implementer of the protocol.Server trait. We do this to prevent
// calling a method on `Methods`, and to keep autocomplete uncluttered.
type methods struct {
	*Methods
}

func (m *methods) warnUninitialized(name string) {
	m.server.Logger.Debugf("'%s' was called but no handler was provided")
}

func (m *methods) Initialize(ctx context.Context, params *protocol.InitializeParams) (result *protocol.InitializeResult, err error) {
	if m.InitializeFunc != nil {
		result, err = m.InitializeFunc(ctx, params)
	} else {
		m.warnUninitialized("initialize")
	}
	m.server.isInitialized = true
	return
}

func (m *methods) Initialized(ctx context.Context, params *protocol.InitializedParams) (err error) {
	if m.InitializedFunc != nil {
		err = m.InitializedFunc(ctx, params)
	} else {
		m.warnUninitialized("initialized")
	}
	return
}
func (m *methods) Shutdown(ctx context.Context) (err error) {
	if m.ShutdownFunc != nil {
		err = m.ShutdownFunc(ctx)
	} else {
		m.warnUninitialized("shutdown")
	}
	return
}
func (m *methods) Exit(ctx context.Context) (err error) {
	if m.ExitFunc != nil {
		err = m.ExitFunc(ctx)
	} else {
		m.warnUninitialized("exit")
	}
	m.closer <- struct{}{}
	return
}
func (m *methods) WorkDoneProgressCancel(ctx context.Context, params *protocol.WorkDoneProgressCancelParams) (err error) {
	if m.WorkDoneProgressCancelFunc != nil {
		err = m.WorkDoneProgressCancelFunc(ctx, params)
	} else {
		m.warnUninitialized("*methods) workDoneProgressCancel")
	}
	return
}
func (m *methods) LogTrace(ctx context.Context, params *protocol.LogTraceParams) (err error) {
	if m.LogTraceFunc != nil {
		err = m.LogTraceFunc(ctx, params)
	} else {
		m.warnUninitialized("logTrace")
	}
	return
}
func (m *methods) SetTrace(ctx context.Context, params *protocol.SetTraceParams) (err error) {
	if m.SetTraceFunc != nil {
		err = m.SetTraceFunc(ctx, params)
	} else {
		m.warnUninitialized("setTrace")
	}
	return
}
func (m *methods) CodeAction(ctx context.Context, params *protocol.CodeActionParams) (result []protocol.CodeAction, err error) {
	if m.CodeActionFunc != nil {
		result, err = m.CodeActionFunc(ctx, params)
	} else {
		m.warnUninitialized("codeAction")
	}
	return
}
func (m *methods) CodeLens(ctx context.Context, params *protocol.CodeLensParams) (result []protocol.CodeLens, err error) {
	if m.CodeLensFunc != nil {
		result, err = m.CodeLensFunc(ctx, params)
	} else {
		m.warnUninitialized("codeLens")
	}
	return
}
func (m *methods) CodeLensResolve(ctx context.Context, params *protocol.CodeLens) (result *protocol.CodeLens, err error) {
	if m.CodeLensResolveFunc != nil {
		result, err = m.CodeLensResolveFunc(ctx, params)
	} else {
		m.warnUninitialized("codeLensResolve")
	}
	return
}
func (m *methods) ColorPresentation(ctx context.Context, params *protocol.ColorPresentationParams) (result []protocol.ColorPresentation, err error) {
	if m.ColorPresentationFunc != nil {
		result, err = m.ColorPresentationFunc(ctx, params)
	} else {
		m.warnUninitialized("colorPresentation")
	}
	return
}
func (m *methods) Completion(ctx context.Context, params *protocol.CompletionParams) (result *protocol.CompletionList, err error) {
	if m.CompletionFunc != nil {
		result, err = m.CompletionFunc(ctx, params)
	} else {
		m.warnUninitialized("completion")
	}
	return
}
func (m *methods) CompletionResolve(ctx context.Context, params *protocol.CompletionItem) (result *protocol.CompletionItem, err error) {
	if m.CompletionResolveFunc != nil {
		result, err = m.CompletionResolveFunc(ctx, params)
	} else {
		m.warnUninitialized("completionResolve")
	}
	return
}
func (m *methods) Declaration(ctx context.Context, params *protocol.DeclarationParams) (result []protocol.Location, err error) {
	if m.DeclarationFunc != nil {
		result, err = m.DeclarationFunc(ctx, params)
	} else {
		m.warnUninitialized("declaration")
	}
	return
}
func (m *methods) Definition(ctx context.Context, params *protocol.DefinitionParams) (result []protocol.Location, err error) {
	if m.DefinitionFunc != nil {
		result, err = m.DefinitionFunc(ctx, params)
	} else {
		m.warnUninitialized("definition")
	}
	return
}
func (m *methods) DidChange(ctx context.Context, params *protocol.DidChangeTextDocumentParams) (err error) {
	if m.DidChangeFunc != nil {
		err = m.DidChangeFunc(ctx, params)
	} else {
		m.warnUninitialized("didChange")
	}
	return
}
func (m *methods) DidChangeConfiguration(ctx context.Context, params *protocol.DidChangeConfigurationParams) (err error) {
	if m.DidChangeConfigurationFunc != nil {
		err = m.DidChangeConfigurationFunc(ctx, params)
	} else {
		m.warnUninitialized("didChangeConfiguration")
	}
	return
}
func (m *methods) DidChangeWatchedFiles(ctx context.Context, params *protocol.DidChangeWatchedFilesParams) (err error) {
	if m.DidChangeWatchedFilesFunc != nil {
		err = m.DidChangeWatchedFilesFunc(ctx, params)
	} else {
		m.warnUninitialized("didChangeWatchedFiles")
	}
	return
}
func (m *methods) DidChangeWorkspaceFolders(ctx context.Context, params *protocol.DidChangeWorkspaceFoldersParams) (err error) {
	if m.DidChangeWorkspaceFoldersFunc != nil {
		err = m.DidChangeWorkspaceFoldersFunc(ctx, params)
	} else {
		m.warnUninitialized("didChangeWorkspaceFolders")
	}
	return
}
func (m *methods) DidClose(ctx context.Context, params *protocol.DidCloseTextDocumentParams) (err error) {
	if m.DidCloseFunc != nil {
		err = m.DidCloseFunc(ctx, params)
	} else {
		m.warnUninitialized("didClose")
	}
	return
}
func (m *methods) DidOpen(ctx context.Context, params *protocol.DidOpenTextDocumentParams) (err error) {
	if m.DidOpenFunc != nil {
		err = m.DidOpenFunc(ctx, params)
	} else {
		m.warnUninitialized("didOpen")
	}
	return
}
func (m *methods) DidSave(ctx context.Context, params *protocol.DidSaveTextDocumentParams) (err error) {
	if m.DidSaveFunc != nil {
		err = m.DidSaveFunc(ctx, params)
	} else {
		m.warnUninitialized("didSave")
	}
	return
}
func (m *methods) DocumentColor(ctx context.Context, params *protocol.DocumentColorParams) (result []protocol.ColorInformation, err error) {
	if m.DocumentColorFunc != nil {
		result, err = m.DocumentColorFunc(ctx, params)
	} else {
		m.warnUninitialized("documentColor")
	}
	return
}
func (m *methods) DocumentHighlight(ctx context.Context, params *protocol.DocumentHighlightParams) (result []protocol.DocumentHighlight, err error) {
	if m.DocumentHighlightFunc != nil {
		result, err = m.DocumentHighlightFunc(ctx, params)
	} else {
		m.warnUninitialized("documentHighlight")
	}
	return
}
func (m *methods) DocumentLink(ctx context.Context, params *protocol.DocumentLinkParams) (result []protocol.DocumentLink, err error) {
	if m.DocumentLinkFunc != nil {
		result, err = m.DocumentLinkFunc(ctx, params)
	} else {
		m.warnUninitialized("documentLink")
	}
	return
}
func (m *methods) DocumentLinkResolve(ctx context.Context, params *protocol.DocumentLink) (result *protocol.DocumentLink, err error) {
	if m.DocumentLinkResolveFunc != nil {
		result, err = m.DocumentLinkResolveFunc(ctx, params)
	} else {
		m.warnUninitialized("documentLinkResolve")
	}
	return
}
func (m *methods) DocumentSymbol(ctx context.Context, params *protocol.DocumentSymbolParams) (result []interface{}, err error) {
	if m.DocumentSymbolFunc != nil {
		result, err = m.DocumentSymbolFunc(ctx, params)
	} else {
		m.warnUninitialized("documentSymbol")
	}
	return
}
func (m *methods) ExecuteCommand(ctx context.Context, params *protocol.ExecuteCommandParams) (result interface{}, err error) {
	if m.ExecuteCommandFunc != nil {
		result, err = m.ExecuteCommandFunc(ctx, params)
	} else {
		m.warnUninitialized("executeCommand")
	}
	return
}
func (m *methods) FoldingRanges(ctx context.Context, params *protocol.FoldingRangeParams) (result []protocol.FoldingRange, err error) {
	if m.FoldingRangesFunc != nil {
		result, err = m.FoldingRangesFunc(ctx, params)
	} else {
		m.warnUninitialized("foldingRanges")
	}
	return
}
func (m *methods) Formatting(ctx context.Context, params *protocol.DocumentFormattingParams) (result []protocol.TextEdit, err error) {
	if m.FormattingFunc != nil {
		result, err = m.FormattingFunc(ctx, params)
	} else {
		m.warnUninitialized("formatting")
	}
	return
}
func (m *methods) Hover(ctx context.Context, params *protocol.HoverParams) (result *protocol.Hover, err error) {
	if m.HoverFunc != nil {
		result, err = m.HoverFunc(ctx, params)
	} else {
		m.warnUninitialized("hover")
	}
	return
}
func (m *methods) Implementation(ctx context.Context, params *protocol.ImplementationParams) (result []protocol.Location, err error) {
	if m.ImplementationFunc != nil {
		result, err = m.ImplementationFunc(ctx, params)
	} else {
		m.warnUninitialized("implementation")
	}
	return
}
func (m *methods) OnTypeFormatting(ctx context.Context, params *protocol.DocumentOnTypeFormattingParams) (result []protocol.TextEdit, err error) {
	if m.OnTypeFormattingFunc != nil {
		result, err = m.OnTypeFormattingFunc(ctx, params)
	} else {
		m.warnUninitialized("onTypeFormatting")
	}
	return
}
func (m *methods) PrepareRename(ctx context.Context, params *protocol.PrepareRenameParams) (result *protocol.Range, err error) {
	if m.PrepareRenameFunc != nil {
		result, err = m.PrepareRenameFunc(ctx, params)
	} else {
		m.warnUninitialized("prepareRename")
	}
	return
}
func (m *methods) RangeFormatting(ctx context.Context, params *protocol.DocumentRangeFormattingParams) (result []protocol.TextEdit, err error) {
	if m.RangeFormattingFunc != nil {
		result, err = m.RangeFormattingFunc(ctx, params)
	} else {
		m.warnUninitialized("rangeFormatting")
	}
	return
}
func (m *methods) References(ctx context.Context, params *protocol.ReferenceParams) (result []protocol.Location, err error) {
	if m.ReferencesFunc != nil {
		result, err = m.ReferencesFunc(ctx, params)
	} else {
		m.warnUninitialized("references")
	}
	return
}
func (m *methods) Rename(ctx context.Context, params *protocol.RenameParams) (result *protocol.WorkspaceEdit, err error) {
	if m.RenameFunc != nil {
		result, err = m.RenameFunc(ctx, params)
	} else {
		m.warnUninitialized("rename")
	}
	return
}
func (m *methods) SignatureHelp(ctx context.Context, params *protocol.SignatureHelpParams) (result *protocol.SignatureHelp, err error) {
	if m.SignatureHelpFunc != nil {
		result, err = m.SignatureHelpFunc(ctx, params)
	} else {
		m.warnUninitialized("signatureHelp")
	}
	return
}
func (m *methods) Symbols(ctx context.Context, params *protocol.WorkspaceSymbolParams) (result []protocol.SymbolInformation, err error) {
	if m.SymbolsFunc != nil {
		result, err = m.SymbolsFunc(ctx, params)
	} else {
		m.warnUninitialized("symbols")
	}
	return
}
func (m *methods) TypeDefinition(ctx context.Context, params *protocol.TypeDefinitionParams) (result []protocol.Location, err error) {
	if m.TypeDefinitionFunc != nil {
		result, err = m.TypeDefinitionFunc(ctx, params)
	} else {
		m.warnUninitialized("typeDefinition")
	}
	return
}
func (m *methods) WillSave(ctx context.Context, params *protocol.WillSaveTextDocumentParams) (err error) {
	if m.WillSaveFunc != nil {
		err = m.WillSaveFunc(ctx, params)
	} else {
		m.warnUninitialized("willSave")
	}
	return
}
func (m *methods) WillSaveWaitUntil(ctx context.Context, params *protocol.WillSaveTextDocumentParams) (result []protocol.TextEdit, err error) {
	if m.WillSaveWaitUntilFunc != nil {
		result, err = m.WillSaveWaitUntilFunc(ctx, params)
	} else {
		m.warnUninitialized("willSaveWaitUntil")
	}
	return
}
func (m *methods) ShowDocument(ctx context.Context, params *protocol.ShowDocumentParams) (result *protocol.ShowDocumentResult, err error) {
	if m.ShowDocumentFunc != nil {
		result, err = m.ShowDocumentFunc(ctx, params)
	} else {
		m.warnUninitialized("showDocument")
	}
	return
}
func (m *methods) WillCreateFiles(ctx context.Context, params *protocol.CreateFilesParams) (result *protocol.WorkspaceEdit, err error) {
	if m.WillCreateFilesFunc != nil {
		result, err = m.WillCreateFilesFunc(ctx, params)
	} else {
		m.warnUninitialized("willCreateFiles")
	}
	return
}
func (m *methods) DidCreateFiles(ctx context.Context, params *protocol.CreateFilesParams) (err error) {
	if m.DidCreateFilesFunc != nil {
		err = m.DidCreateFilesFunc(ctx, params)
	} else {
		m.warnUninitialized("didCreateFiles")
	}
	return
}
func (m *methods) WillRenameFiles(ctx context.Context, params *protocol.RenameFilesParams) (result *protocol.WorkspaceEdit, err error) {
	if m.WillRenameFilesFunc != nil {
		result, err = m.WillRenameFilesFunc(ctx, params)
	} else {
		m.warnUninitialized("willRenameFiles")
	}
	return
}
func (m *methods) DidRenameFiles(ctx context.Context, params *protocol.RenameFilesParams) (err error) {
	if m.DidRenameFilesFunc != nil {
		err = m.DidRenameFilesFunc(ctx, params)
	} else {
		m.warnUninitialized("didRenameFiles")
	}
	return
}
func (m *methods) WillDeleteFiles(ctx context.Context, params *protocol.DeleteFilesParams) (result *protocol.WorkspaceEdit, err error) {
	if m.WillDeleteFilesFunc != nil {
		result, err = m.WillDeleteFilesFunc(ctx, params)
	} else {
		m.warnUninitialized("willDeleteFiles")
	}
	return
}
func (m *methods) DidDeleteFiles(ctx context.Context, params *protocol.DeleteFilesParams) (err error) {
	if m.DidDeleteFilesFunc != nil {
		err = m.DidDeleteFilesFunc(ctx, params)
	} else {
		m.warnUninitialized("didDeleteFiles")
	}
	return
}
func (m *methods) CodeLensRefresh(ctx context.Context) (err error) {
	if m.CodeLensRefreshFunc != nil {
		err = m.CodeLensRefreshFunc(ctx)
	} else {
		m.warnUninitialized("codeLensRefresh")
	}
	return
}
func (m *methods) PrepareCallHierarchy(ctx context.Context, params *protocol.CallHierarchyPrepareParams) (result []protocol.CallHierarchyItem, err error) {
	if m.PrepareCallHierarchyFunc != nil {
		result, err = m.PrepareCallHierarchyFunc(ctx, params)
	} else {
		m.warnUninitialized("prepareCallHierarchy")
	}
	return
}
func (m *methods) IncomingCalls(ctx context.Context, params *protocol.CallHierarchyIncomingCallsParams) (result []protocol.CallHierarchyIncomingCall, err error) {
	if m.IncomingCallsFunc != nil {
		result, err = m.IncomingCallsFunc(ctx, params)
	} else {
		m.warnUninitialized("incomingCalls")
	}
	return
}
func (m *methods) OutgoingCalls(ctx context.Context, params *protocol.CallHierarchyOutgoingCallsParams) (result []protocol.CallHierarchyOutgoingCall, err error) {
	if m.OutgoingCallsFunc != nil {
		result, err = m.OutgoingCallsFunc(ctx, params)
	} else {
		m.warnUninitialized("outgoingCalls")
	}
	return
}
func (m *methods) SemanticTokensFull(ctx context.Context, params *protocol.SemanticTokensParams) (result *protocol.SemanticTokens, err error) {
	if m.SemanticTokensFullFunc != nil {
		result, err = m.SemanticTokensFullFunc(ctx, params)
	} else {
		m.warnUninitialized("semanticTokensFull")
	}
	return
}
func (m *methods) SemanticTokensFullDelta(ctx context.Context, params *protocol.SemanticTokensDeltaParams) (result interface{}, err error) {
	if m.SemanticTokensFullDeltaFunc != nil {
		result, err = m.SemanticTokensFullDeltaFunc(ctx, params)
	} else {
		m.warnUninitialized("semanticTokensFullDelta")
	}
	return
}
func (m *methods) SemanticTokensRange(ctx context.Context, params *protocol.SemanticTokensRangeParams) (result *protocol.SemanticTokens, err error) {
	if m.SemanticTokensRangeFunc != nil {
		result, err = m.SemanticTokensRangeFunc(ctx, params)
	} else {
		m.warnUninitialized("semanticTokensRange")
	}
	return
}
func (m *methods) SemanticTokensRefresh(ctx context.Context) (err error) {
	if m.SemanticTokensRefreshFunc != nil {
		err = m.SemanticTokensRefreshFunc(ctx)
	} else {
		m.warnUninitialized("semanticTokensRefresh")
	}
	return
}
func (m *methods) LinkedEditingRange(ctx context.Context, params *protocol.LinkedEditingRangeParams) (result *protocol.LinkedEditingRanges, err error) {
	if m.LinkedEditingRangeFunc != nil {
		result, err = m.LinkedEditingRangeFunc(ctx, params)
	} else {
		m.warnUninitialized("linkedEditingRange")
	}
	return
}
func (m *methods) Moniker(ctx context.Context, params *protocol.MonikerParams) (result []protocol.Moniker, err error) {
	if m.MonikerFunc != nil {
		result, err = m.MonikerFunc(ctx, params)
	} else {
		m.warnUninitialized("moniker")
	}
	return
}
func (m *methods) Request(ctx context.Context, method string, params interface{}) (result interface{}, err error) {
	if m.RequestFunc != nil {
		result, err = m.RequestFunc(ctx, method, params)
	} else {
		m.warnUninitialized("request")
	}
	return
}
